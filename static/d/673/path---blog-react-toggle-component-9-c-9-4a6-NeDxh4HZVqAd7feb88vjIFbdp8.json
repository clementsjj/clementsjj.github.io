{"data":{"markdownRemark":{"html":"<h2>Preface</h2>\n<p>Today I had a minor hiccup with creating a simple toggle click -> view on a React element. Its something I know how to do, and I was frustrated when I couldn't bust out the code flawlessly. So to remedy this, I'll write about it to remember, and leave it on the internets for someone else to find helpful in the future. </p>\n<h2>The Problem &#x26; Setup</h2>\n<p>I have two little snippets of data I want to see, but allow the user to click to hide to free up more space.\nRundown of steps:</p>\n<ul>\n<li>\n<p>Add the future element's 'isOpen' property to state</p>\n<ul>\n<li><code>isOpen: {fy18: true, fy19: true}</code></li>\n<li>I wanted to have them in an object to keep track of easily</li>\n</ul>\n</li>\n<li>\n<p>Add the holder for the element</p>\n<ul>\n<li><code>{this.state.isOpen.fy18 &#x26;&#x26; &#x3C;TaxData />}</code></li>\n<li>This will display my component if fy18 is true, which by default, it is. </li>\n</ul>\n</li>\n<li>\n<p>Add the onclick to set state to view or hide</p>\n<ul>\n<li>This is the part I want to dive into deeper.</li>\n</ul>\n</li>\n<li>\n<p>Add the toggleIsOpen method for the class</p>\n<ul>\n<li>This is also the part I want to dive into deeper.</li>\n</ul>\n</li>\n</ul>\n<h2>The <code>onClick</code> Handler</h2>\n<p>In the <code>&#x3C;p></code> tag, I add an onClick property that looks like this:\n<code>&#x3C;p onClick= { () => toggleIsOpen('fy18') }></code>\n<code>&#x3C;p onClick= { () => toggleIsOpen('fy19') }></code>\n\nSometimes, I still mess up how I am running my handlers.\nIn this particular case, I initially typed <code>onClick= {toggleIsOpen('fy19') }</code>\nThis created a loop of running the toggleIsOpen function since it is automatically running.\nI also want to pass the name in so I only have to use one toggle function. I am passing the string in as a parameter. </p>\n<h2>The <code>toggleIsOpen</code> Method</h2>\n<p>This is where the magic will happen. Now that I know I'm not going to be running a loop of executing this method, and I'm receiving the component that was clicked by passing a string argument, this shouldn't be too bad. </p>\n<p>Remember, we shouldn't mutate state directly, and we want to easily toggle with a '!'.\nThings are slightly more tricky when working with an object in state, but not bad.\nHere is the code for toggleIsOpen:</p>\n<pre><code class=\"language-javascript\">toggleIsOpen = (name) => {\n  this.setState(prevState => (\n    {\n      isOpen: {\n        ...prevState.isOpen,\n        [name]: !prevState.isOpen[name]\n      }\n    }\n  ), () => console.log('>>>>>>>>>>>>>>>>>>Taxes >>>> this.state.isOpen', this.state.isOpen))\n}\n</code></pre>\n<p>Things to highlight:</p>\n<ul>\n<li>We are passing in the string, and when we use a parameter that changes to refer to state, we should refer to it in brackets [ name ].</li>\n<li>In order to prevent mutating state directly, we can use the spread operator to bring in the previous state, and then change specifically the part that we want to change with [name]. This has turned in to a common practice for me, using the spread operator with prevState. Its the simplest syntax to copy the object, and make specific changes. </li>\n<li>Console.log used after setState should be used as a calback/second argument in setState to guarentee that it will run after state is set. Also ensure its an actual function and not just <code>console.log()</code>...I've made that mistake too many times. </li>\n</ul>\n<h2>Conclusion</h2>\n<p>We created a simple toggle method that can be used by any number of components, resused, and picked up by new components.\nThe code will hopefully serve as a reference for future use cases. </p>","frontmatter":{"title":"Simple React Toggle Component"}}},"pageContext":{"slug":"/blog/react-toggle-component/"}}